{"/home/travis/build/npmtest/node-npmtest-threads_a_gogo/test.js":"/* istanbul instrument in package npmtest_threads_a_gogo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/lib.npmtest_threads_a_gogo.js":"/* istanbul instrument in package npmtest_threads_a_gogo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_threads_a_gogo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_threads_a_gogo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-threads_a_gogo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_threads_a_gogo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_threads_a_gogo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_threads_a_gogo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_threads_a_gogo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_threads_a_gogo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_threads_a_gogo.__dirname + '/lib.npmtest_threads_a_gogo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/node_modules/threads_a_gogo/benchmark/b00_fibonacci_server_no_threads.js":"\n\nfunction fib (n) {\n  return (n < 2) ? 1 : fib(n-2)+ fib(n-1);\n}\n\nvar i= 0;\nvar n= 35;\nfunction ƒ (req, res) {\n  if ((++i) % 10) {\n    res.end(\" QUICK\");\n    process.stdout.write(\" QUICK\");\n  }\n  else {\n    var txt= ' '+ fib(n);\n    res.end(txt);\n    process.stdout.write(txt);\n  }\n}\n\n\nvar port= +process.argv[2] || 1234;\nvar http= require('http');\nhttp.globalAgent.maxSockets= 8192+2048;\nhttp.createServer(ƒ).listen(port);\nconsole.log('Fibonacci server (NO THREADS) running @port: '+ port);\n\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/node_modules/threads_a_gogo/benchmark/b01_fibonacci_server_threads.js":"\n\nfunction fib (n) {\n  return (n < 2) ? 1 : fib(n-2)+ fib(n-1);\n}\n\n//We're going to use n threads\nvar numThreads= +process.argv[3] || 1;\nconsole.log(\"Using \"+ numThreads+ \" threads\");\n\nvar threads= [];\nvar round_robin= 0;\nvar t= require('threads_a_gogo');\nwhile (numThreads--) {\n  threads.push(t.create().eval(fib));\n}\n\nvar i= 0;\nvar n= 35;\nfunction ƒ (req, res) {\n  if ((++i) % 10) {\n    res.end(\" QUICK\");\n    process.stdout.write(\" QUICK\");\n  }\n  else {\n    round_robin= (++round_robin) % threads.length;\n    threads[round_robin].eval('fib('+ n+ ')', function cb (err, data) {\n      if (err) throw err;\n      var txt= ' '+ data;\n      res.end(txt);\n      process.stdout.write(txt);\n    });\n  }\n}\n\n\nvar port= +process.argv[2] || 1234;\nvar http= require('http');\nhttp.globalAgent.maxSockets= 8192+2048;\nhttp.createServer(ƒ).listen(port);\nconsole.log('Fibonacci server (WITH THREADS) running @port: '+ port);\n\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/node_modules/threads_a_gogo/benchmark/b02_fibonacci_server_threads_pool.js":"\n\nfunction fib (n) {\n  return (n < 2) ? 1 : fib(n-2)+ fib(n-1);\n}\n\n//We're going to use n threads\nvar numThreads= +process.argv[3] || 1;\nconsole.log(\"Using a POOL of \"+ numThreads+ \" threads\");\n\nvar pool= require('threads_a_gogo').createPool(numThreads).all.eval(fib);\n\nvar i= 0;\nvar n= 35;\nfunction ƒ (req, res) {\n  if ((++i) % 10) {\n    res.end(\" QUICK\");\n    process.stdout.write(\" QUICK\");\n  }\n  else {\n    pool.any.eval('fib('+ n+ ')', function cb (err, data) {\n      if (err) throw err;\n      var txt= ' '+ data;\n      res.end(txt);\n      process.stdout.write(txt);\n    });\n  }\n}\n\n\nvar port= +process.argv[2] || 1234;\nvar http= require('http');\nhttp.globalAgent.maxSockets= 8192+2048;\nhttp.createServer(ƒ).listen(port);\nconsole.log('Fibonacci server (WITH A THREAD POOL) running @port: '+ port);\n\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/node_modules/threads_a_gogo/benchmark/b03_fibonacci_server_clustered.js":"\n\nfunction fib (n) {\n  return (n < 2) ? 1 : fib(n-2)+ fib(n-1);\n}\n\nvar i= 0;\nvar n= 35;\nfunction ƒ (req, res) {\n  if ((++i) % 10) {\n    res.end(\" QUICK\");\n    process.stdout.write(\" QUICK\");\n  }\n  else {\n    var txt= ' '+ fib(n);\n    res.end(txt);\n    process.stdout.write(txt);\n  }\n}\n\nvar cluster = require('cluster');\nif (cluster.isMaster) {\n  require('http').globalAgent.maxSockets= 8192+2048;\n  var numCPUs = process.argv[3] || 1;\n  for (var i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('death', function(worker) {\n    console.log('worker ' + worker.pid + ' died');\n  });\n} else {\n  var port= + process.argv[2] || 1234;\n  var http= require('http');\n  http.globalAgent.maxSockets= 8192+2048;\n  http.createServer(ƒ).listen(port);\n  console.log('Fibonacci server (CLUSTERED) listening: ' + port);\n}\n\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/node_modules/threads_a_gogo/benchmark/b04_only_quick.js":"\n\nfunction ƒ (req, res) {\n  res.end(\" QUICK\");\n  process.stdout.write(\" QUICK\");\n}\n\n\nvar port= +process.argv[2] || 1234;\nvar http= require('http');\nhttp.globalAgent.maxSockets= 8192+2048;\nhttp.createServer(ƒ).listen(port);\nconsole.log('Fibonacci server (NO THREADS) running @port: '+ port);\n\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/node_modules/threads_a_gogo/benchmark/pi.js":"\n\nvar Threads= require('threads_a_gogo');\n\n\nfunction cb (err, msg) {\n  this.destroy();\n  ++i;\n  process.stdout.write('\\n'+ msg + ' -> '+ this.id);\n}\n\nfunction pi () {\n  var π= 0;\n  var num= 4;\n  var den= 1;\n  var plus= true;\n\n  while (den < 5e7) {\n    if (plus) {\n      π+= num/den;\n      plus= false;\n    }\n    else {\n      π-= num/den;\n      plus= true;\n    }\n    den+= 2;\n  }\n  return π;\n}\n\n\nvar i= +process.argv[2] || 1;\nconsole.log('Using '+ i+ ' threads');\n\n\nvar t= Date.now();\nwhile (i--) {\n  Threads.create().eval('('+ pi+ ')()', cb);\n}\n\n\ni= 0;\nprocess.on('exit', function () {\n  t= Date.now()- t;\n  var tps= (i*1e3/t).toFixed(1);\n  console.log('\\nTiempo total (ms) -> '+ t);\n  console.log('Threads por segundo -> '+ tps);\n  console.log('Total de threads ejecutadas -> '+ i);\n});\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/node_modules/threads_a_gogo/benchmark/pi_precompiled.js":"\n\nvar Threads= require('threads_a_gogo');\n\n\nfunction cb (err, msg) {\n  this.destroy();\n  ++i;\n  process.stdout.write('\\n'+ msg + ' -> '+ this.id);\n}\n\nfunction pi () {\n  var π= 0;\n  var num= 4;\n  var den= 1;\n  var plus= true;\n\n  while (den < 1e7) {\n    if (plus) {\n      π+= num/den;\n      plus= false;\n    }\n    else {\n      π-= num/den;\n      plus= true;\n    }\n    den+= 2;\n  }\n  return π;\n}\n\n\nvar i= +process.argv[2] || 1;\nconsole.log('Using '+ i+ ' threads');\n\nvar precompiled= Threads.preCompile('('+ pi+ ')()');\nvar t= Date.now();\nwhile (i--) {\n  Threads.create().eval(precompiled, cb);\n}\n\n\ni= 0;\nprocess.on('exit', function () {\n  t= Date.now()- t;\n  var tps= (i*1e3/t).toFixed(1);\n  console.log('\\nTiempo total (ms) -> '+ t);\n  console.log('Threads por segundo -> '+ tps);\n  console.log('Total de threads ejecutadas -> '+ i);\n});\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/node_modules/threads_a_gogo/src/boot.js":"//2016-12 Proyectos Equis Ka, s.l., jorge@jorgechamorro.com\n//threads_a_gogo boot.js\n//boot0 runs at module.init() which is at tagg= require('threads_a_gogo')\n//boot1 runs twice at t=tagg.create(), first in node's main thread and\n//again in the thread just .create()d\n\n(function boot0 (global) {\n\n  global= (function () { return this })();\n\n  if (global.process) {\n    if (!global.setImmediate) {\n      global.setImmediate= function setImmediate (f) {\n        process.nextTick(f);\n      };\n    }\n  }\n\n  function boot (that,global,CHUNK,_on,_ntq) {\n\n    that= this;\n    global= (function () { return this })();\n\n    function nextTick (cb) {\n      _ntq.push(cb);\n    }\n\n    CHUNK= 8192;\n    function dispatchNextTicks (len,i) {\n      if (_ntq.length) {\n        len= _ntq.length > CHUNK ? CHUNK : _ntq.length;\n        i= 0;\n        try {\n          do { _ntq[i++]() } while (i<len);\n          that._ntq= _ntq= _ntq.splice(i);\n        }\n        catch (e) {\n          that._ntq= _ntq= _ntq.splice(i);\n          throw e;\n        }\n      }\n      return _ntq.length;\n    }\n\n    function on (event,f,q) {\n      (q= _on[event]) ? q.push(f) : (_on[event]= [f]);\n      return that;\n    }\n\n    function once (event,f,q) {\n      (q= _on[event]) ? 0 : (q= _on[event]= []);\n      q.once ? q.once.push(f) : (q.once= [f]);\n      return that;\n    }\n\n    function removeAllListeners (event) {\n      event ? delete _on[event] : (that._on= _on= {});\n      return that;\n    }\n\n    function dispatchEvents (event,argumentos,i) {\n      var q= _on[event];\n      if (q) {\n        if (q.once) {\n          while (q.once.length) {\n            q.once.shift().apply(that, argumentos);\n          }\n        }\n        for ( i=0 ; i<q.length ; i++ ) {\n          q[i].apply(that, argumentos);\n        }\n      }\n    }\n  \n\n    if (global.process) {\n      that.on= on;\n      that.once= once;\n      that._on= _on= {};\n      that.removeAllListeners= removeAllListeners;\n      return dispatchEvents;\n    }\n    else {\n      thread= that;that.on= on;\n      that.once= once;\n      that._on= _on= {};\n      that._ntq= _ntq= [];\n      that.removeAllListeners= removeAllListeners;\n      that.nextTick= global.setImmediate= nextTick;\n      return {dev:dispatchEvents, dnt:dispatchNextTicks};\n    }\n  }\n\n  return boot;\n\n})()\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/node_modules/threads_a_gogo/src/js2c.js":"\n\nvar newLine= \"\\\\n\";\n\nfunction hex (str,txt,i,c,v) {\n    txt= \"\";\n    for (i=0 ; i<str.length ; i+=1) {\n        c= str[i];\n        v= c.charCodeAt(0);\n        if (c === \"\\\"\") txt+= \"\\\\\\\"\";\n        else if ((v < 127) && (c >= \" \")) txt+= c;\n        else if (c === \"\\n\") txt+= newLine;\n        else if (c === \"\\r\") txt+= newLine;\n        else if (v > 127) {\n            c= v.toString(16);\n            while (c.length < 4) c= \"0\"+ c;\n            txt+= \"\\\\u\"+ c;\n        };\n    }\n    return txt;\n}\n\nfunction jsminjs (script) {\n\n/* jsmin.js para node.js (https://github.com/xk/jsmin.js)\n   2016-12-18\n   Copyright (c) 2016 Jorge Chamorro Bieling (jorge@jorgechamorro.com)\n   basado en:\n\njsmin.c\n2008-08-03\nCopyright (c) 2002 Douglas Crockford  (www.crockford.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nThe Software shall be used for Good, not Evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\nvar theA;\nvar theB;\nvar EOF= \"EOF\";\nvar theLookahead = EOF;\n\n/* puts -- write a string\n                to a stream.\n*/\n\nfunction puts (stream, str) {\n    if (stream === \"stdout\") {\n        stdout+= str;\n    }\n    else {\n        process[stream].write(str);\n    }\n}\n\n\n/* isAlphanum -- return true if the character is a letter, digit, underscore,\n        dollar sign, or non-ASCII character.\n*/\n\nfunction isAlphanum (c) {\n    return ((c >= \"a\" && c <= \"z\") || (c >= \"0\" && c <= \"9\") ||\n        (c >= \"A\" && c <= \"Z\") || c === \"_\" || c === \"$\" || c === \"\\\\\" ||\n        c > \"\\x7e\");\n}\n\n\n/* getc -- return the next character from stream,\n        or EOF if there aren't any more.\n*/\n\nfunction getc (stream) {\n    var c;\n    if (stream.nextc < stream.buffer.length) {\n        c = stream.buffer[stream.nextc];\n        stream.nextc += 1;\n        return c;\n    }\n    return EOF;\n}\n\n\n/* get -- return the next character from stdin. Watch out for lookahead. If\n        the character is a control character, translate it to a space or\n        linefeed.\n*/\n\nfunction get () {\n    var c = theLookahead;\n    theLookahead = EOF;\n    if (c === EOF) {\n        c = getc(stdin);\n    }\n    if (c === EOF || c >= \" \" || c === \"\\n\") {\n        return c;\n    }\n    if (c === \"\\r\") {\n        return \"\\n\";\n    }\n    return \" \";\n}\n\n\n/* peek -- get the next character without getting it.\n*/\n\nfunction peek () {\n    theLookahead = get();\n    return theLookahead;\n}\n\n\n/* next -- get the next character, excluding comments. peek() is used to see\n        if a \"/\" is followed by a \"/\" or \"*\".\n*/\n\nfunction next () {\n    var c = get();\n    if  (c === \"/\") {\n        switch (peek()) {\n        case \"/\":\n            while (1) {\n                c = get();\n                if (c <= \"\\n\") {\n                    return c;\n                }\n            }\n        case \"*\":\n            get();\n            while (1) {\n                switch (get()) {\n                case \"*\":\n                    if (peek() === \"/\") {\n                        get();\n                        return \" \";\n                    }\n                    break;\n                case EOF:\n                    puts(\"stderr\", \"Error: JSMIN Unterminated comment.\\n\");\n                    process.exit(1);\n                }\n            }\n        default:\n            return c;\n        }\n    }\n    return c;\n}\n\n\n/* action -- do something! What you do is determined by the argument:\n        1   Output A. Copy B to A. Get the next B.\n        2   Copy B to A. Get the next B. (Delete A).\n        3   Get the next B. (Delete B).\n   action treats a string as a single character. Wow!\n   action recognizes a regular expression if it is preceded by ( or , or =.\n*/\n\nfunction action (d) {\n    switch (d) {\n    case 1:\n        puts(\"stdout\", theA);\n    case 2:\n        theA = theB;\n        if (theA === \"'\" || theA === \"\\\"\") {\n            while (1) {\n                puts(\"stdout\", theA);\n                theA = get();\n                if (theA === theB) {\n                    break;\n                }\n                if (theA === \"\\\\\") {\n                    puts(\"stdout\", theA);\n                    theA = get();\n                }\n                if (theA === EOF) {\n                    puts(\"stderr\", \"Error: JSMIN unterminated string literal.\");\n                    process.exit(1);\n                }\n            }\n        }\n    case 3:\n        theB = next();\n        if (theB === \"/\" && (theA === \"(\" || theA === \",\" || theA === \"=\" ||\n                             theA === \":\" || theA === \"[\" || theA === \"!\" ||\n                             theA === \"&\" || theA === \"|\" || theA === \"?\" ||\n                             theA === \"{\" || theA === \"}\" || theA === \";\" ||\n                             theA === \"\\n\")) {\n            puts(\"stdout\", theA);\n            puts(\"stdout\", theB);\n            while (1) {\n                theA = get();\n                if (theA === \"/\") {\n                    break;\n                }\n                if (theA === \"\\\\\") {\n                    puts(\"stdout\", theA);\n                    theA = get();\n                }\n                if (theA === EOF) {\n                    puts(\"stderr\", \"Error: JSMIN unterminated Regular Expression literal.\\n\");\n                    process.exit(1);\n                }\n                puts(\"stdout\", theA);\n            }\n            theB = next();\n        }\n    }\n}\n\n\n/* jsmin -- Copy the input to the output, deleting the characters which are\n        insignificant to JavaScript. Comments will be removed. Tabs will be\n        replaced with spaces. Carriage returns will be replaced with linefeeds.\n        Most spaces and linefeeds will be removed.\n*/\n\nfunction jsmin () {\n    theA = \"\\n\";\n    action(3);\n    while (theA !== EOF) {\n        switch (theA) {\n        case \" \":\n            if (isAlphanum(theB)) {\n                action(1);\n            }\n            else {\n                action(2);\n            }\n            break;\n        case \"\\n\":\n            switch (theB) {\n            case \"{\":\n            case \"[\":\n            case \"(\":\n            case \"+\":\n            case \"-\":\n                action(1);\n                break;\n            case \" \":\n                action(3);\n                break;\n            default:\n                if (isAlphanum(theB)) {\n                    action(1);\n                } else {\n                    action(2);\n                }\n            }\n            break;\n        default:\n            switch (theB) {\n            case \" \":\n                if (isAlphanum(theA)) {\n                    action(1);\n                    break;\n                }\n                action(3);\n                break;\n            case \"\\n\":\n                switch (theA) {\n                case \"}\":\n                case \"]\":\n                case \")\":\n                case \"+\":\n                case \"-\":\n                case \"\\\"\":\n                case \"'\":\n                    action(1);\n                    break;\n                default:\n                    if (isAlphanum(theA)) {\n                        action(1);\n                    } else {\n                        action(3);\n                    }\n                }\n                break;\n            default:\n                action(1);\n                break;\n            }\n        }\n    }\n}\n\n\n\nvar stdout= \"\";\nvar stdin= { nextc:0, buffer:script };\njsmin();\nreturn stdout;\n\n}\n\nfunction jstoc (file,cVarName,fs,txt) {\n    fs= require('fs');\n    txt= \"\\nstatic const char* \"\n           + cVarName+ \"= \\\"\"\n           + hex(jsminjs(fs.readFileSync(file, \"utf8\")))\n           + \"\\\";\\x0a\";\n\n    fs.writeFileSync(file+ \".c\", txt, \"utf8\");\n    console.log(\"*** THREADS_A_GOGO: JS2C(\"+ cVarName+ \"): OK\");\n}\n\n\njstoc(\"boot.js\", \"kBoot_js\");\njstoc(\"pool.js\", \"kPool_js\");\n","/home/travis/build/npmtest/node-npmtest-threads_a_gogo/node_modules/threads_a_gogo/src/pool.js":"\n(function createPool (n) {\n  'use strict';\n  \n  //2011-11, 2016-12 Proyectos Equis Ka, s.l., jorge@jorgechamorro.com\n  //threads_a_gogo pool.js\n  \n  var o,tagg,jobsCtr;\n\n  function load (path, cb) {\n    o.pool.forEach(function (v,i,o) { v.load(path, cb) });\n    return o;\n  }\n\n\n  function wrap (cb) {\n    return function wrapcb (err, result) {\n      jobsCtr-= 1;\n      if (cb) cb.call(this, err, result);\n    }\n  }\n\n\n  function evalAny (src, cb) {\n/*\n    TODO esto no es lo que debe ser, no es cuestión de elegir al buen tuntún\n*/\n    jobsCtr+= 1;\n    o.pool[rnd(o.pool.length)].eval(src, wrap(cb));\n    return o;\n  }\n  \n  \n  function evalAll (src, cb, i) {\n    i= o.pool.length;\n    while (i--) {\n      jobsCtr+= 1;\n      o.pool[i].eval(src, wrap(cb));\n    };\n    return o;\n  }\n\n\n  function emitAny (t, args) {\n/*\n    TODO esto no es lo que debe ser, no es cuestión de elegir al buen tuntún\n*/\n    args= Array.prototype.splice.call(arguments,0);\n    t= o.pool[rnd(o.pool.length)];\n    t.emit.apply(t, args);\n    return o;\n  }\n\n\n  function emitAll (t, args, i) {\n    args= Array.prototype.splice.call(arguments,0);\n    i= o.pool.length;\n    while (i--) {\n      t= o.pool[i];\n      t.emit.apply(t, args);\n    }\n    return o;\n  }\n\n\n  function on (event, cb) {\n    o.pool.forEach(function (v,i,o) { v.on(event, cb) });\n    return o;\n  }\n\n\n  function rnd (n) { return Math.floor(n * Math.random()) }\n  \n  \n  function destroy (rudeza, sucb, ctr) {\n    ctr= 0;\n    function micb () {\n      if (++ctr === o.pool.length) setImmediate(sucb);\n    }\n    if (typeof sucb !== 'function') sucb= 0;\n    o.pool.forEach(function (v,i,o) { sucb ? v.destroy(rudeza, micb) : v.destroy(rudeza) });\n    o.any.eval= o.any.emit= o.all.eval= o.all.emit= o.on= o.load= o.destroy= function err () {\n      throw new Error('This thread pool has been destroyed');\n    };\n    o.pool= [];\n  }\n\n\n  n= Math.floor(n);\n  if (!(n > 0)) {\n    throw new Error('.createPool( numOfThreads ): numOfThreads must be a Number > 0');\n  }\n  \n  tagg= this;\n  jobsCtr= 0;\n  o= {  \n        load:load,\n        on:on,\n        any: { eval:evalAny, emit:emitAny },\n        all: { eval:evalAll, emit:emitAll },\n        totalThreads: function getTotalThreads () { return o.pool.length },\n        idleThreads: function getIdleThreads () {\n/*\n    TODO esto no es lo que debe ser, espabilao!\n*/\n          return o.pool.length\n        },\n        pendingJobs: function getPendingJobs () { return jobsCtr },\n        destroy:destroy,\n        pool: [] };\n\n  try {\n    while (n--) o.pool[n]= tagg.create();\n  }\n  catch (e) {\n    if (o.pool.length) {\n      o.pool.length-= 1;\n      while (o.pool.length) o.pool.pop().destroy(1);\n    }\n    throw e;\n  }\n\n  return o;\n})\n"}